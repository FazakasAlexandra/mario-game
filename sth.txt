import { Sprite } from './Sprite.js'
import { Database } from './Database.js'
import { xy2i } from '../utilities.js'

export class MapGenerator {
    constructor(context){
        this.context = context
        this.mapIndex = 0
        this.w = 50
        this.h = 50
        this.tileXstart = 0
        this.tileYstart = 0
        this.baseMap = []
    }

    makeBaseMap = () => {
        this.mapIndex = 0

        for (let y = 0; y < 5; y++) {
            for (let x = 0; x < 24; x++, this.mapIndex++) {
                this.tileXstart = x * this.w
                this.tileYstart = y * this.h

                this.baseMap.push(0)

                this.makeBaseTile()
            }
        }
        this.addBaseMapEvent()
    }

    makeBaseTile() {
        this.context.beginPath();
        this.context.lineWidth = "2";
        this.context.strokeStyle = "black";
        this.context.rect(this.tileXstart, this.tileYstart, 50, 50);
        this.context.stroke();
    }

    
    addBaseMapEvent() {
        this.context.canvas.addEventListener('click', (event) => {
            const baseMapIndex = xy2i(Math.floor(event.clientX / 50), 
                                      Math.floor(event.clientY / 50), 
                                      24)
            this.baseMap[baseMapIndex] = 1
            this.updateBaseMap()
        })
    }

    updateBaseMap() {
        for (let y = 0; y < 5; y++) {
            for (let x = 0; x < 24; x++, this.mapIndex++) {
                this.tileXstart = x * this.w
                this.tileYstart = y * this.h

                this.makeBaseTile()

                //console.log(this.baseMap[this.mapIndex])
                switch (this.baseMap[this.mapIndex]) {
                    case 1:
                        console.log('here')
                        const sprite =  new Sprite('./assets/objects/box.png', this.context)
                        sprite.drawSprite(this.tileXstart, this.tileYstart)
                        this.makeBaseTile()
                        break

                }
            }
        }
        this.addBaseMapEvent()
        //console.log(this.baseMap)
    }
}










------------------------------------------------









import { Sprite } from './Sprite.js'
import { Database } from './Database.js'
import { getNumbersArr } from '../utilities.js'

export class Map {
    constructor(context) {
        this.context = context
        this.database = new Database()
        this.database.getMaps(this.makeMapModels, this)
        this.mapModels = []
        this.currentMap = this.mapModels.firstMap
        this.mapIndex = 0
        this.w = 50
        this.h = 50
        this.tileXstart = 0
        this.tileYstart = 0
    }

    makeMapModels(maps, self) {
        maps.forEach((map, i) => {
            let strArr = map.grid.split(",")
            let nrArr = getNumbersArr(strArr)
            maps[i].grid = nrArr

            self.mapModels.push({
                level: map.level,
                grid: map.grid,
                skyColor: map.skyColor,
                boxCoordinates: [],
                sushiCoordinates: [],
                remainedSushi: map.remainedSushi,
                flagCoordinates: {
                    x: null,
                    y: null
                }
            })
        });
    }

    drawMap(map, self = this) {
        self.mapIndex = 0

        for (let y = 0; y < 5; y++) {
            for (let x = 0; x < 24; x++, self.mapIndex++) {
                self.tileXstart = x * self.w
                self.tileYstart = y * self.h

                self.makeSkyTile(self, map)

                if(map.grid[self.mapIndex].gridValue !== 0){
                    const sprite = new Sprite(map.grid[self.mapIndex].img)
                    sprite.drawSprite(self.tileXstart, self.tileYstart)
                }

            }
        }
    }


    makeSkyTile(self, map) {
        self.context.fillStyle = map.skyColor
        self.context.fillRect(self.tileXstart, self.tileYstart, 50, 50);
    }

    removeCollectedItems(map, coordType) {
        map[coordType] = map[coordType].filter(item => {
            if (item.collected) {
                map.grid[item.index] = 0
                map.remainedSushi--
            } else return item
        })
    }
}